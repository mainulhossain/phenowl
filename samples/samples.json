{
    "samples": [
       {
           "name": "Count Words in Hadoop",
           "desc": "Count the number of individual words in a directory of SRLAB's Phenodoop server.",
           "sample": [
           "# First remove the output directory. Otherwise, Hadoop streaming",
           "# will reject the script if the directory already exists.",
           "outdir = 'http://sr-p2irc-big1.usask.ca:50070/user/phenodoop/output'",
           "Remove(outdir)",
           "",
           "# Now count the words. This is a distributed operation over hadoop cluster.",
           "# Depending on number of documents and document size, it may take time.",
           "CountWords('/user/phenodoop/documents', '/user/phenodoop/output')",
           "",
           "files = GetFiles(outdir)",
           "for f in files:",
           "    path = outdir + '/' + f",
           "    data = Read(path)",
           "    print(data)"
           ]
       },
       {
           "name": "Search word or regex in Hadoop",
           "desc": "Search a word or regular expression in a directory of SRLAB's Phenodoop server.",
           "sample": [
           "# First remove the output directory. Otherwise, Hadoop streaming",
           "# will reject the script if the directory already exists.",
           "outdir = 'http://sr-p2irc-big1.usask.ca:50070/user/phenodoop/output'",
           "Remove(outdir)",
           "",
           "# Now count the words. This is a distributed operation over hadoop cluster.",
           "# Depending on number of documents and document size, it may take time.",
           "SearchWord('/user/phenodoop/documents', '/user/phenodoop/output', 'The[a-z]*')",
           "",
           "files = GetFiles(outdir)",
           "for f in files:",
           "    path = outdir + '/' + f",
           "    data = Read(path)",
           "    print(data)"
           ]
       },
       {
           "name": "Hadoop Word Count and Search in Parallel",
           "desc": "Count words and search for word or regular expression in a directory of SRLAB's Phenodoop server.",
           "sample": [
           "parallel:",
           "    # First remove the output directory. Otherwise, Hadoop streaming",
           "    # will reject the script if the directory already exists.",
           "    outdir = 'http://sr-p2irc-big1.usask.ca:50070/user/phenodoop/output'",
           "    Remove(outdir)",
           "",
           "    # Now count the words. This is a distributed operation over hadoop cluster.",
           "    # Depending on number of documents and document size, it may take time.",
           "    CountWords('/user/phenodoop/documents', '/user/phenodoop/output')",
           "",
           "    files = GetFiles(outdir)",
           "    for f in files:",
           "        path = outdir + '/' + f",
           "        data = Read(path)",
           "        print(data)",
           "with:",
           "    # First remove the output directory. Otherwise, Hadoop streaming",
           "    # will reject the script if the directory already exists.",
           "    outdir = 'http://sr-p2irc-big1.usask.ca:50070/user/phenodoop/output1'",
           "    Remove(outdir)",
           "",
           "    # Now count the words. This is a distributed operation over hadoop cluster.",
           "    # Depending on number of documents and document size, it may take time.",
           "    SearchWord('/user/phenodoop/documents', '/user/phenodoop/output1', 'The[a-z]*')",
           "",
           "    files = GetFiles(outdir)",
           "    for f in files:",
           "        path = outdir + '/' + f",
           "        data = Read(path)",
           "        print(data)"
           ]
       },
       {
           "name": "Image Processing Pipeline",
           "desc": "A pipeline of image processing functions implemented with opencv. Image Alignment, Noise Reduction and Color Space conversion are performed sequentially.",
           "sample": [
           "# Remove the output image if it already exists.",
           "Remove('output/test_image.jpg')",
           "",
           "# Register (align) two images.",
           "RegisterImage('images/test_image1.jpg', 'images/test_image2.jpg', 'output/test_image.jpg')",
           "",
           "# Reduce noise from the output image.",
           "ReduceNoise('output/test_image.jpg', 'output/test_image.jpg')",
           "",
           "# Convert to gray scale.",
           "# code (3rd param) is conversion code from opencv cv2.COLOR_BGR2GRAY=6",
           "ConvertColor('output/test_image.jpg', 'output/test_image.jpg', 6)",
           "",
           "outdir = 'output'",
           "files = GetFiles(outdir)",
           "for f in files:",
           "    path = outdir + '/' + f",
           "    print(path)"
           ]
       }
    ]
}

